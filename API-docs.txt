Authentication
All API endpoints require authentication using a Bearer token. Include the token in the Authorization header of your request.
CopyAuthorization: Bearer {your_token}
Work Experience API
Get All Work Experiences

URL: /api/WorkExperience
Method: GET
Auth Required: Yes (Bearer Token)
Description: Retrieves all work experiences
Response: Array of work experience objects

Get Work Experience by ID

URL: /api/WorkExperience/{id}
Method: GET
Auth Required: Yes (Bearer Token)
URL Parameters:

id: Guid - The ID of the work experience


Description: Retrieves a specific work experience by ID
Response: A work experience object
Error Responses:

404 Not Found: If work experience doesn't exist



Get Work Experiences by User ID

URL: /api/WorkExperience/user/{userId}
Method: GET
Auth Required: Yes (Bearer Token)
URL Parameters:

userId: Guid - The ID of the user


Description: Retrieves all work experiences for a specific user
Response: Array of work experience objects

Create Work Experience

URL: /api/WorkExperience
Method: POST
Auth Required: Yes (Bearer Token)
Content-Type: application/json
Body:
jsonCopy{
  "user_id": "guid",
  "job_title": "string",
  "company_name": "string",
  "location": "string",
  "start_date": "date",
  "end_date": "date" | null,
  "is_current": boolean,
  "description": "string",
  "experience_skill": "string"
}

Description: Creates a new work experience
Response: The created work experience object with status 201 Created

Update Work Experience

URL: /api/WorkExperience/{id}
Method: PUT
Auth Required: Yes (Bearer Token)
URL Parameters:

id: Guid - The ID of the work experience


Content-Type: application/json
Body:
jsonCopy{
  "experience_id": "guid",
  "user_id": "guid",
  "job_title": "string",
  "company_name": "string",
  "location": "string",
  "start_date": "date",
  "end_date": "date" | null,
  "is_current": boolean,
  "description": "string",
  "experience_skill": "string"
}

Description: Updates an existing work experience
Response: Status 204 No Content
Error Responses:

400 Bad Request: If ID in URL doesn't match ID in body
404 Not Found: If work experience doesn't exist



Delete Work Experience

URL: /api/WorkExperience/{id}
Method: DELETE
Auth Required: Yes (Bearer Token)
URL Parameters:

id: Guid - The ID of the work experience


Description: Deletes a work experience
Response: Status 204 No Content
Error Responses:

404 Not Found: If work experience doesn't exist



Education API
Get All Educations

URL: /api/Education
Method: GET
Auth Required: Yes (Bearer Token)
Description: Retrieves all education records
Response: Array of education objects

Get Education by ID

URL: /api/Education/{id}
Method: GET
Auth Required: Yes (Bearer Token)
URL Parameters:

id: Guid - The ID of the education record


Description: Retrieves a specific education record by ID
Response: An education object
Error Responses:

404 Not Found: If education record doesn't exist



Get Educations by User ID

URL: /api/Education/user/{userId}
Method: GET
Auth Required: Yes (Bearer Token)
URL Parameters:

userId: Guid - The ID of the user


Description: Retrieves all education records for a specific user
Response: Array of education objects

Create Education

URL: /api/Education
Method: POST
Auth Required: Yes (Bearer Token)
Content-Type: application/json
Body:
jsonCopy{
  "user_id": "guid",
  "degree_name": "string",
  "institution_name": "string",
  "start_year": integer,
  "end_year": integer | null,
  "description": "string"
}

Description: Creates a new education record
Response: The created education object with status 201 Created

Update Education

URL: /api/Education/{id}
Method: PUT
Auth Required: Yes (Bearer Token)
URL Parameters:

id: Guid - The ID of the education record


Content-Type: application/json
Body:
jsonCopy{
  "education_id": "guid",
  "user_id": "guid",
  "degree_name": "string",
  "institution_name": "string",
  "start_year": integer,
  "end_year": integer | null,
  "description": "string"
}

Description: Updates an existing education record
Response: Status 204 No Content
Error Responses:

400 Bad Request: If ID in URL doesn't match ID in body
404 Not Found: If education record doesn't exist



Delete Education

URL: /api/Education/{id}
Method: DELETE
Auth Required: Yes (Bearer Token)
URL Parameters:

id: Guid - The ID of the education record


Description: Deletes an education record
Response: Status 204 No Content
Error Responses:

404 Not Found: If education record doesn't exist



Certification API
Get All Certifications

URL: /api/Certification
Method: GET
Auth Required: Yes (Bearer Token)
Description: Retrieves all certifications
Response: Array of certification objects

Get Certification by ID

URL: /api/Certification/{id}
Method: GET
Auth Required: Yes (Bearer Token)
URL Parameters:

id: Guid - The ID of the certification


Description: Retrieves a specific certification by ID
Response: A certification object
Error Responses:

404 Not Found: If certification doesn't exist



Get Certifications by User ID

URL: /api/Certification/user/{userId}
Method: GET
Auth Required: Yes (Bearer Token)
URL Parameters:

userId: Guid - The ID of the user


Description: Retrieves all certifications for a specific user
Response: Array of certification objects

Create Certification

URL: /api/Certification
Method: POST
Auth Required: Yes (Bearer Token)
Content-Type: application/json
Body:
jsonCopy{
  "user_id": "guid",
  "certification_name": "string",
  "issuing_organization": "string",
  "issue_date": "date",
  "expiry_date": "date" | null,
  "credential_id": "string",
  "credential_url": "string"
}

Description: Creates a new certification
Response: The created certification object with status 201 Created

Update Certification

URL: /api/Certification/{id}
Method: PUT
Auth Required: Yes (Bearer Token)
URL Parameters:

id: Guid - The ID of the certification


Content-Type: application/json
Body:
jsonCopy{
  "certification_id": "guid",
  "user_id": "guid",
  "certification_name": "string",
  "issuing_organization": "string",
  "issue_date": "date",
  "expiry_date": "date" | null,
  "credential_id": "string",
  "credential_url": "string"
}

Description: Updates an existing certification
Response: Status 204 No Content
Error Responses:

400 Bad Request: If ID in URL doesn't match ID in body
404 Not Found: If certification doesn't exist



Delete Certification

URL: /api/Certification/{id}
Method: DELETE
Auth Required: Yes (Bearer Token)
URL Parameters:

id: Guid - The ID of the certification


Description: Deletes a certification
Response: Status 204 No Content
Error Responses:

404 Not Found: If certification doesn't exist



Project API
Get All Projects

URL: /api/Project
Method: GET
Auth Required: Yes (Bearer Token)
Description: Retrieves all projects
Response: Array of project objects

Get Project by ID

URL: /api/Project/{id}
Method: GET
Auth Required: Yes (Bearer Token)
URL Parameters:

id: Guid - The ID of the project


Description: Retrieves a specific project by ID
Response: A project object
Error Responses:

404 Not Found: If project doesn't exist



Get Projects by User ID

URL: /api/Project/user/{userId}
Method: GET
Auth Required: Yes (Bearer Token)
URL Parameters:

userId: Guid - The ID of the user


Description: Retrieves all projects for a specific user
Response: Array of project objects

Create Project

URL: /api/Project
Method: POST
Auth Required: Yes (Bearer Token)
Content-Type: application/json
Body:
jsonCopy{
  "user_id": "guid",
  "project_name": "string",
  "project_year": integer,
  "description": "string",
  "project_url": "string"
}

Description: Creates a new project
Response: The created project object with status 201 Created

Update Project

URL: /api/Project/{id}
Method: PUT
Auth Required: Yes (Bearer Token)
URL Parameters:

id: Guid - The ID of the project


Content-Type: application/json
Body:
jsonCopy{
  "project_id": "guid",
  "user_id": "guid",
  "project_name": "string",
  "project_year": integer,
  "description": "string",
  "project_url": "string"
}

Description: Updates an existing project
Response: Status 204 No Content
Error Responses:

400 Bad Request: If ID in URL doesn't match ID in body
404 Not Found: If project doesn't exist



Delete Project

URL: /api/Project/{id}
Method: DELETE
Auth Required: Yes (Bearer Token)
URL Parameters:

id: Guid - The ID of the project


Description: Deletes a project
Response: Status 204 No Content
Error Responses:

404 Not Found: If project doesn't exist



POST: /Files/upload
Uploads a file to the server.
Request
•	Method: POST
•	Authentication: Required (JWT Bearer token)
•	Content-Type: multipart/form-data
•	Parameters:
•	file (form-data): The file to upload
•	folder (query, optional): The folder to store the file in
Response
200 OK
{
  "fileKey": "string"
}
400 Bad Request
•	Returned when no file was provided or the file is empty.
500 Internal Server Error
•	Returned when an error occurs during file upload.

GET: /Files/{fileKey}
Downloads a file from the server.
Request
•	Method: GET
•	Authentication: Required (JWT Bearer token)
•	Parameters:
•	fileKey (path): The key of the file to download
Response
200 OK
•	Content-Type: Determined by file extension
•	Body: The file content as a binary stream
404 Not Found
•	Returned when the file cannot be found or an error occurs retrieving the file.
DELETE: /Files/{fileKey}
Deletes a file from the server.
Request
•	Method: DELETE
•	Authentication: Required (JWT Bearer token)
•	Parameters:
•	fileKey (path): The key of the file to delete
Response
200 OK
{
  "success": true|false
}
500 Internal Server Error
•	Returned when an error occurs during file deletion.

Supported File Types
The API supports various file types including:
•	Images (.jpg, .jpeg, .png, .gif)
•	Documents (.pdf, .doc, .docx, .txt)
•	Spreadsheets (.xls, .xlsx)
•	Archives (.zip)
•	Other file types will be served as "application/octet-stream"

GET: /Profile/Complete
Retrieves the complete profile information of the authenticated user.
Request
•	Method: GET
•	Authentication: Required (JWT Bearer token)
•	Parameters: None
Response
200 OK
{
  "basicInfo": {
    "user_id": "guid",
    "username": "string",
    "full_name": "string",
    "email": "string",
    "age": "integer?",
    "intro": "string",
    "contact_number": "string",
    "icon": "string",
    "privacy_status": "string",
    "role": "string",
    "account_created_time": "datetime",
    "last_login_at": "datetime?",
    "location": "string"
  },
  "workExperiences": [
    {
      "experience_id": "guid",
      "job_title": "string",
      "company_name": "string",
      "location": "string",
      "start_date": "datetime",
      "end_date": "datetime?",
      "is_current": "boolean",
      "description": "string",
      "experience_skill": "string"
    }
  ],
  "education": [
    {
      "education_id": "guid",
      "degree_name": "string",
      "institution_name": "string",
      "start_year": "integer",
      "end_year": "integer?",
      "description": "string"
    }
  ],
  "projects": [
    {
      "project_id": "guid",
      "project_name": "string",
      "project_year": "integer",
      "description": "string",
      "project_url": "string"
    }
  ],
  "publications": [
    {
      "publication_id": "guid",
      "publication_title": "string",
      "publisher": "string",
      "publication_year": "integer",
      "publication_url": "string",
      "description": "string"
    }
  ],
  "skills": [
    {
      "skill_id": "integer",
      "skill_name": "string",
      "skill_level": "string"
    }
  ],
  "certifications": [
    {
      "certification_id": "guid",
      "certification_name": "string",
      "issuing_organization": "string",
      "issue_date": "datetime",
      "expiry_date": "datetime?",
      "credential_id": "string",
      "credential_url": "string"
    }
  ]
}

401 Unauthorized
•	Returned when the authentication token is missing, invalid, or the user ID cannot be retrieved from claims.
404 Not Found
•	Returned when the user profile cannot be found.

Publication API
Get All Publications

URL: /api/Publication
Method: GET
Auth Required: Yes (Bearer Token)
Description: Retrieves all publications
Response: Array of publication objects

Get Publication by ID

URL: /api/Publication/{id}
Method: GET
Auth Required: Yes (Bearer Token)
URL Parameters:

id: Guid - The ID of the publication


Description: Retrieves a specific publication by ID
Response: A publication object
Error Responses:

404 Not Found: If publication doesn't exist



Get Publications by User ID

URL: /api/Publication/user/{userId}
Method: GET
Auth Required: Yes (Bearer Token)
URL Parameters:

userId: Guid - The ID of the user


Description: Retrieves all publications for a specific user
Response: Array of publication objects

Create Publication

URL: /api/Publication
Method: POST
Auth Required: Yes (Bearer Token)
Content-Type: application/json
Body:
jsonCopy{
  "user_id": "guid",
  "publication_title": "string",
  "publisher": "string",
  "publication_year": integer,
  "publication_url": "string",
  "description": "string"
}

Description: Creates a new publication
Response: The created publication object with status 201 Created

Update Publication

URL: /api/Publication/{id}
Method: PUT
Auth Required: Yes (Bearer Token)
URL Parameters:

id: Guid - The ID of the publication


Content-Type: application/json
Body:
jsonCopy{
  "publication_id": "guid",
  "user_id": "guid",
  "publication_title": "string",
  "publisher": "string",
  "publication_year": integer,
  "publication_url": "string",
  "description": "string"
}

Description: Updates an existing publication
Response: Status 204 No Content
Error Responses:

400 Bad Request: If ID in URL doesn't match ID in body
404 Not Found: If publication doesn't exist



Delete Publication

URL: /api/Publication/{id}
Method: DELETE
Auth Required: Yes (Bearer Token)
URL Parameters:

id: Guid - The ID of the publication


Description: Deletes a publication
Response: Status 204 No Content
Error Responses:

404 Not Found: If publication doesn't exist



Error Handling
All APIs may return the following errors:

401 Unauthorized: If the Bearer token is missing, invalid, or expired
403 Forbidden: If the authenticated user doesn't have permission to access the requested resource
500 Internal Server Error: For unexpected server errors


